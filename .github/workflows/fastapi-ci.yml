# =========================================================
# GitHub Actions Workflow for FastAPI Books Project
# Purpose: Automated CI/CD pipeline (linting, testing, deploy)
# =========================================================

name: FastAPI Books CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  quality-check:
    runs-on: ubuntu-latest
    name: Code Quality and Testing

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: 📦 Install Required Packages
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn pytest httpx flake8
        # Install extra dependencies if requirements.txt is present
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: 🔍 Run Static Code Analysis
      run: |
        echo "Running flake8 for linting..."
        # Critical issues only (syntax errors, undefined vars, etc.)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        echo "Running flake8 for style checks..."
        # Style + complexity warnings (won’t break build)
        flake8 . --count --exit-zero --max-complexity=12 --max-line-length=120 --statistics

    - name: 🧪 Run Unit Tests
      run: |
        echo "Executing pytest suite..."
        pytest -v --disable-warnings

  deploy:
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.ref == 'refs/heads/main'
    name: Deploy to Server

    steps:
      - name: 📥 Checkout Main Branch
        uses: actions/checkout@v4

      - name: 🚀 Deploy FastAPI App
        run: |
          echo "Starting deployment for FastAPI Books..."

          # Replace below with actual deployment logic
          # Example for remote server deployment:
          # ssh ubuntu@your-server-ip "cd /srv/fastapi-books && git pull && systemctl restart fastapi-books.service"
          
          echo "✅ Deployment completed successfully!"
